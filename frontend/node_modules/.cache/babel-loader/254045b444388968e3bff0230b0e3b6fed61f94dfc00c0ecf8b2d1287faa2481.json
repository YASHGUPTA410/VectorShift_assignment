{"ast":null,"code":"// // logger.js\n// const LOG_LEVELS = {\n//     INFO: 'INFO',\n//     ERROR: 'ERROR',\n//     DEBUG: 'DEBUG',\n//     WARN: 'WARN'\n// };\n\n// class Logger {\n//     constructor() {\n//         this.metadata = {\n//             userAgent: navigator.userAgent,\n//             url: window.location.href,\n//             timestamp: new Date().toISOString()\n//         };\n//     }\n\n//     formatLogEntry(level, component, action, details = {}) {\n//         return {\n//             timestamp: new Date().toISOString(),\n//             level,\n//             component,\n//             action,\n//             details: {\n//                 ...details,\n//                 url: window.location.href\n//             },\n//             metadata: this.metadata\n//         };\n//     }\n\n//     info(component, action, details = {}) {\n//         const logEntry = this.formatLogEntry(LOG_LEVELS.INFO, component, action, details);\n//         console.info(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n//         this.sendToServer(logEntry);\n//     }\n\n//     error(component, action, error, details = {}) {\n//         const logEntry = this.formatLogEntry(LOG_LEVELS.ERROR, component, action, {\n//             ...details,\n//             error: {\n//                 message: error.message,\n//                 stack: error.stack,\n//                 name: error.name\n//             }\n//         });\n//         console.error(`[${logEntry.timestamp}] ${component} - ${action}:`, error, details);\n//         this.sendToServer(logEntry);\n//     }\n\n//     debug(component, action, details = {}) {\n//         const logEntry = this.formatLogEntry(LOG_LEVELS.DEBUG, component, action, details);\n//         console.debug(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n//         this.sendToServer(logEntry);\n//     }\n\n//     warn(component, action, details = {}) {\n//         const logEntry = this.formatLogEntry(LOG_LEVELS.WARN, component, action, details);\n//         console.warn(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n//         this.sendToServer(logEntry);\n//     }\n\n//     // Performance logging\n//     logPerformance(component, action, startTime, details = {}) {\n//         const duration = performance.now() - startTime;\n//         this.info(component, action, {\n//             ...details,\n//             duration_ms: duration\n//         });\n//     }\n\n//     // API call logging\n//     logApiCall(component, endpoint, method, startTime, status, details = {}) {\n//         const duration = performance.now() - startTime;\n//         this.info(component, 'API_CALL', {\n//             endpoint,\n//             method,\n//             status,\n//             duration_ms: duration,\n//             ...details\n//         });\n//     }\n\n//     // User interaction logging\n//     logUserInteraction(component, action, details = {}) {\n//         this.info(component, action, {\n//             ...details,\n//             timestamp: new Date().toISOString()\n//         });\n//     }\n\n//     // Optional: Send logs to backend\n//     async sendToServer(logEntry) {\n//         // In development, we'll just console log\n//         if (process.env.NODE_ENV === 'development') {\n//             return;\n//         }\n\n//         // In production, you could send logs to your backend\n//         try {\n//             await fetch('http://localhost:8000/logs', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify(logEntry)\n//             });\n//         } catch (error) {\n//             console.error('Failed to send log to server:', error);\n//         }\n//     }\n// }\n\n// // Create a singleton instance\n// const logger = new Logger();\n\n// export default logger;\n\n// logger.js\nconst LOG_LEVELS = {\n  INFO: 'INFO',\n  ERROR: 'ERROR',\n  DEBUG: 'DEBUG',\n  WARN: 'WARN'\n};\nclass Logger {\n  constructor() {\n    // Logger class for capturing metadata and logging events\n    this.metadata = {\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      timestamp: this.getTimestamp()\n    };\n  }\n\n  // Returns the current timestamp as an ISO string\n  getTimestamp() {\n    return new Date().toISOString();\n  }\n  formatLogEntry(level, component, action, details = {}) {\n    return {\n      timestamp: this.getTimestamp(),\n      level,\n      component,\n      action,\n      details: {\n        ...details,\n        url: window.location.href\n      },\n      metadata: this.metadata\n    };\n  }\n  info(component, action, details = {}) {\n    const logEntry = this.formatLogEntry(LOG_LEVELS.INFO, component, action, details);\n    console.info(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n    this.sendToServer(logEntry);\n  }\n  error(component, action, error, details = {}) {\n    const logEntry = this.formatLogEntry(LOG_LEVELS.ERROR, component, action, {\n      ...details,\n      error: {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      }\n    });\n    console.error(`[${logEntry.timestamp}] ${component} - ${action}:`, error, details);\n    this.sendToServer(logEntry);\n  }\n  debug(component, action, details = {}) {\n    const logEntry = this.formatLogEntry(LOG_LEVELS.DEBUG, component, action, details);\n    console.debug(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n    this.sendToServer(logEntry);\n  }\n  warn(component, action, details = {}) {\n    const logEntry = this.formatLogEntry(LOG_LEVELS.WARN, component, action, details);\n    console.warn(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n    this.sendToServer(logEntry);\n  }\n\n  // Utility logging functions for performance, API calls, and user interactions\n  logPerformance(component, action, startTime, details = {}) {\n    const duration = performance.now() - startTime;\n    this.info(component, action, {\n      ...details,\n      duration_ms: duration\n    });\n  }\n  logApiCall(component, endpoint, method, startTime, status, details = {}) {\n    const duration = performance.now() - startTime;\n    this.info(component, 'API_CALL', {\n      endpoint,\n      method,\n      status,\n      duration_ms: duration,\n      ...details\n    });\n  }\n  logUserInteraction(component, action, details = {}) {\n    this.info(component, action, {\n      ...details,\n      timestamp: this.getTimestamp()\n    });\n  }\n\n  // Sends log entry to server in production mode\n  async sendToServer(logEntry) {\n    if (process.env.NODE_ENV === 'development') return;\n    try {\n      await fetch('http://localhost:8000/logs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(logEntry)\n      });\n    } catch (error) {\n      console.error('Failed to send log to server:', error);\n    }\n  }\n}\n\n// Singleton instance of Logger\nconst logger = new Logger();\nexport default logger;","map":{"version":3,"names":["LOG_LEVELS","INFO","ERROR","DEBUG","WARN","Logger","constructor","metadata","userAgent","navigator","url","window","location","href","timestamp","getTimestamp","Date","toISOString","formatLogEntry","level","component","action","details","info","logEntry","console","sendToServer","error","message","stack","name","debug","warn","logPerformance","startTime","duration","performance","now","duration_ms","logApiCall","endpoint","method","status","logUserInteraction","process","env","NODE_ENV","fetch","headers","body","JSON","stringify","logger"],"sources":["/Users/yashgupta/Downloads/vectorshift-assignment/frontend/src/services/logger.js"],"sourcesContent":["// // logger.js\n// const LOG_LEVELS = {\n//     INFO: 'INFO',\n//     ERROR: 'ERROR',\n//     DEBUG: 'DEBUG',\n//     WARN: 'WARN'\n// };\n\n// class Logger {\n//     constructor() {\n//         this.metadata = {\n//             userAgent: navigator.userAgent,\n//             url: window.location.href,\n//             timestamp: new Date().toISOString()\n//         };\n//     }\n\n//     formatLogEntry(level, component, action, details = {}) {\n//         return {\n//             timestamp: new Date().toISOString(),\n//             level,\n//             component,\n//             action,\n//             details: {\n//                 ...details,\n//                 url: window.location.href\n//             },\n//             metadata: this.metadata\n//         };\n//     }\n\n//     info(component, action, details = {}) {\n//         const logEntry = this.formatLogEntry(LOG_LEVELS.INFO, component, action, details);\n//         console.info(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n//         this.sendToServer(logEntry);\n//     }\n\n//     error(component, action, error, details = {}) {\n//         const logEntry = this.formatLogEntry(LOG_LEVELS.ERROR, component, action, {\n//             ...details,\n//             error: {\n//                 message: error.message,\n//                 stack: error.stack,\n//                 name: error.name\n//             }\n//         });\n//         console.error(`[${logEntry.timestamp}] ${component} - ${action}:`, error, details);\n//         this.sendToServer(logEntry);\n//     }\n\n//     debug(component, action, details = {}) {\n//         const logEntry = this.formatLogEntry(LOG_LEVELS.DEBUG, component, action, details);\n//         console.debug(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n//         this.sendToServer(logEntry);\n//     }\n\n//     warn(component, action, details = {}) {\n//         const logEntry = this.formatLogEntry(LOG_LEVELS.WARN, component, action, details);\n//         console.warn(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n//         this.sendToServer(logEntry);\n//     }\n\n//     // Performance logging\n//     logPerformance(component, action, startTime, details = {}) {\n//         const duration = performance.now() - startTime;\n//         this.info(component, action, {\n//             ...details,\n//             duration_ms: duration\n//         });\n//     }\n\n//     // API call logging\n//     logApiCall(component, endpoint, method, startTime, status, details = {}) {\n//         const duration = performance.now() - startTime;\n//         this.info(component, 'API_CALL', {\n//             endpoint,\n//             method,\n//             status,\n//             duration_ms: duration,\n//             ...details\n//         });\n//     }\n\n//     // User interaction logging\n//     logUserInteraction(component, action, details = {}) {\n//         this.info(component, action, {\n//             ...details,\n//             timestamp: new Date().toISOString()\n//         });\n//     }\n\n//     // Optional: Send logs to backend\n//     async sendToServer(logEntry) {\n//         // In development, we'll just console log\n//         if (process.env.NODE_ENV === 'development') {\n//             return;\n//         }\n\n//         // In production, you could send logs to your backend\n//         try {\n//             await fetch('http://localhost:8000/logs', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify(logEntry)\n//             });\n//         } catch (error) {\n//             console.error('Failed to send log to server:', error);\n//         }\n//     }\n// }\n\n// // Create a singleton instance\n// const logger = new Logger();\n\n// export default logger;\n\n\n// logger.js\nconst LOG_LEVELS = {\n    INFO: 'INFO',\n    ERROR: 'ERROR',\n    DEBUG: 'DEBUG',\n    WARN: 'WARN'\n  };\n  \n  class Logger {\n    constructor() {\n      // Logger class for capturing metadata and logging events\n      this.metadata = {\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n        timestamp: this.getTimestamp()\n      };\n    }\n  \n    // Returns the current timestamp as an ISO string\n    getTimestamp() {\n      return new Date().toISOString();\n    }\n  \n    formatLogEntry(level, component, action, details = {}) {\n      return {\n        timestamp: this.getTimestamp(),\n        level,\n        component,\n        action,\n        details: {\n          ...details,\n          url: window.location.href\n        },\n        metadata: this.metadata\n      };\n    }\n  \n    info(component, action, details = {}) {\n      const logEntry = this.formatLogEntry(LOG_LEVELS.INFO, component, action, details);\n      console.info(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n      this.sendToServer(logEntry);\n    }\n  \n    error(component, action, error, details = {}) {\n      const logEntry = this.formatLogEntry(LOG_LEVELS.ERROR, component, action, {\n        ...details,\n        error: {\n          message: error.message,\n          stack: error.stack,\n          name: error.name\n        }\n      });\n      console.error(`[${logEntry.timestamp}] ${component} - ${action}:`, error, details);\n      this.sendToServer(logEntry);\n    }\n  \n    debug(component, action, details = {}) {\n      const logEntry = this.formatLogEntry(LOG_LEVELS.DEBUG, component, action, details);\n      console.debug(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n      this.sendToServer(logEntry);\n    }\n  \n    warn(component, action, details = {}) {\n      const logEntry = this.formatLogEntry(LOG_LEVELS.WARN, component, action, details);\n      console.warn(`[${logEntry.timestamp}] ${component} - ${action}:`, details);\n      this.sendToServer(logEntry);\n    }\n  \n    // Utility logging functions for performance, API calls, and user interactions\n    logPerformance(component, action, startTime, details = {}) {\n      const duration = performance.now() - startTime;\n      this.info(component, action, { ...details, duration_ms: duration });\n    }\n  \n    logApiCall(component, endpoint, method, startTime, status, details = {}) {\n      const duration = performance.now() - startTime;\n      this.info(component, 'API_CALL', {\n        endpoint,\n        method,\n        status,\n        duration_ms: duration,\n        ...details\n      });\n    }\n  \n    logUserInteraction(component, action, details = {}) {\n      this.info(component, action, { ...details, timestamp: this.getTimestamp() });\n    }\n  \n    // Sends log entry to server in production mode\n    async sendToServer(logEntry) {\n      if (process.env.NODE_ENV === 'development') return;\n      try {\n        await fetch('http://localhost:8000/logs', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(logEntry)\n        });\n      } catch (error) {\n        console.error('Failed to send log to server:', error);\n      }\n    }\n  }\n  \n  // Singleton instance of Logger\n  const logger = new Logger();\n  export default logger;\n  "],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}