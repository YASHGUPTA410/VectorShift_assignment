{"ast":null,"code":"var _jsxFileName = \"/Users/yashgupta/Downloads/vectorshift-assignment/frontend/src/integrations/hubspot.js\",\n  _s = $RefreshSig$();\n// // hubspot.js\n\n// import { useState, useEffect } from 'react';\n// import {\n//     Box,\n//     Button,\n//     CircularProgress\n// } from '@mui/material';\n// import axios from 'axios';\n// import logger from '../services/logger';\n\n// export const HubSpotIntegration = ({ user, org, integrationParams, setIntegrationParams }) => {\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [isConnecting, setIsConnecting] = useState(false);\n\n//     // Function to open OAuth in a new window\n//     const handleConnectClick = async () => {\n//         const startTime = performance.now();\n//         try {\n//             logger.logUserInteraction('HubSpotIntegration', 'CONNECT_CLICK', {\n//                 user_id: user,\n//                 org_id: org\n//             });\n\n//             setIsConnecting(true);\n//             const formData = new FormData();\n//             formData.append('user_id', user);\n//             formData.append('org_id', org);\n\n//             const response = await axios.post(`http://localhost:8000/integrations/hubspot/authorize`, formData);\n//             const authURL = response?.data;\n\n//             logger.logApiCall(\n//                 'HubSpotIntegration',\n//                 '/integrations/hubspot/authorize',\n//                 'POST',\n//                 startTime,\n//                 response.status,\n//                 { user_id: user, org_id: org }\n//             );\n\n//             const newWindow = window.open(authURL, 'HubSpot Authorization', 'width=600, height=600');\n//             logger.info('HubSpotIntegration', 'OAUTH_WINDOW_OPENED', {\n//                 auth_url: authURL\n//             });\n\n//             // Polling for the window to close\n//             const pollTimer = window.setInterval(() => {\n//                 if (newWindow?.closed !== false) { \n//                     window.clearInterval(pollTimer);\n//                     handleWindowClosed();\n//                 }\n//             }, 200);\n//         } catch (e) {\n//             logger.error('HubSpotIntegration', 'CONNECT_ERROR', e, {\n//                 user_id: user,\n//                 org_id: org\n//             });\n//             setIsConnecting(false);\n//             alert(e?.response?.data?.detail);\n//         }\n//     }\n\n//     // Function to handle logic when the OAuth window closes\n//     const handleWindowClosed = async () => {\n//         const startTime = performance.now();\n//         try {\n//             logger.info('HubSpotIntegration', 'OAUTH_WINDOW_CLOSED');\n\n//             const formData = new FormData();\n//             formData.append('user_id', user);\n//             formData.append('org_id', org);\n//             const response = await axios.post(`http://localhost:8000/integrations/hubspot/credentials`, formData);\n//             const credentials = response.data;\n\n//             logger.logApiCall(\n//                 'HubSpotIntegration',\n//                 '/integrations/hubspot/credentials',\n//                 'POST',\n//                 startTime,\n//                 response.status,\n//                 { user_id: user, org_id: org }\n//             );\n\n//             if (credentials) {\n//                 setIsConnecting(false);\n//                 setIsConnected(true);\n//                 setIntegrationParams(prev => ({ ...prev, credentials: credentials, type: 'HubSpot' }));\n//                 logger.info('HubSpotIntegration', 'CONNECTION_SUCCESS', {\n//                     user_id: user,\n//                     org_id: org\n//                 });\n//             }\n//             setIsConnecting(false);\n//         } catch (e) {\n//             logger.error('HubSpotIntegration', 'CREDENTIALS_ERROR', e, {\n//                 user_id: user,\n//                 org_id: org\n//             });\n//             setIsConnecting(false);\n//             alert(e?.response?.data?.detail);\n//         }\n//     }\n\n//     useEffect(() => {\n//         const hasCredentials = Boolean(integrationParams?.credentials);\n//         setIsConnected(hasCredentials);\n\n//         if (hasCredentials) {\n//             logger.debug('HubSpotIntegration', 'CREDENTIALS_LOADED', {\n//                 user_id: user,\n//                 org_id: org\n//             });\n//         }\n//     }, [integrationParams, user, org]);\n\n//     return (\n//         <>\n//         <Box sx={{mt: 2}}>\n//             Parameters\n//             <Box display='flex' alignItems='center' justifyContent='center' sx={{mt: 2}}>\n//                 <Button \n//                     variant='contained' \n//                     onClick={isConnected ? () => {} : handleConnectClick}\n//                     color={isConnected ? 'success' : 'primary'}\n//                     disabled={isConnecting}\n//                     style={{\n//                         pointerEvents: isConnected ? 'none' : 'auto',\n//                         cursor: isConnected ? 'default' : 'pointer',\n//                         opacity: isConnected ? 1 : undefined\n//                     }}\n//                 >\n//                     {isConnected ? 'HubSpot Connected' : isConnecting ? <CircularProgress size={20} /> : 'Connect to HubSpot'}\n//                 </Button>\n//             </Box>\n//         </Box>\n//       </>\n//     );\n// }\n\n// hubspot.js\nimport { useState, useEffect } from 'react';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport axios from 'axios';\nimport logger from '../services/logger';\n\n// Helper to create form data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createFormData = (user, org) => {\n  const formData = new FormData();\n  formData.append('user_id', user);\n  formData.append('org_id', org);\n  return formData;\n};\n\n// Helper to poll for window close event\nconst pollWindowClose = (newWindow, callback, interval = 200) => {\n  const pollTimer = window.setInterval(() => {\n    if ((newWindow === null || newWindow === void 0 ? void 0 : newWindow.closed) !== false) {\n      window.clearInterval(pollTimer);\n      callback();\n    }\n  }, interval);\n};\nexport const HubSpotIntegration = ({\n  user,\n  org,\n  integrationParams,\n  setIntegrationParams\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  // Initiates the OAuth process and opens the authorization window\n  const handleConnectClick = async () => {\n    const startTime = performance.now();\n    try {\n      logger.logUserInteraction('HubSpotIntegration', 'CONNECT_CLICK', {\n        user_id: user,\n        org_id: org\n      });\n      setIsConnecting(true);\n      const response = await axios.post('http://localhost:8000/integrations/hubspot/authorize', createFormData(user, org));\n      const authURL = response === null || response === void 0 ? void 0 : response.data;\n      logger.logApiCall('HubSpotIntegration', '/integrations/hubspot/authorize', 'POST', startTime, response.status, {\n        user_id: user,\n        org_id: org\n      });\n      const newWindow = window.open(authURL, 'HubSpot Authorization', 'width=600, height=600');\n      logger.info('HubSpotIntegration', 'OAUTH_WINDOW_OPENED', {\n        auth_url: authURL\n      });\n      pollWindowClose(newWindow, handleWindowClosed);\n    } catch (e) {\n      var _e$response, _e$response$data;\n      logger.error('HubSpotIntegration', 'CONNECT_ERROR', e, {\n        user_id: user,\n        org_id: org\n      });\n      setIsConnecting(false);\n      alert(e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.detail);\n    }\n  };\n\n  // Fetches credentials once the OAuth window is closed\n  const handleWindowClosed = async () => {\n    const startTime = performance.now();\n    try {\n      logger.info('HubSpotIntegration', 'OAUTH_WINDOW_CLOSED');\n      const response = await axios.post('http://localhost:8000/integrations/hubspot/credentials', createFormData(user, org));\n      const credentials = response.data;\n      logger.logApiCall('HubSpotIntegration', '/integrations/hubspot/credentials', 'POST', startTime, response.status, {\n        user_id: user,\n        org_id: org\n      });\n      if (credentials) {\n        setIsConnected(true);\n        setIntegrationParams(prev => ({\n          ...prev,\n          credentials,\n          type: 'HubSpot'\n        }));\n        logger.info('HubSpotIntegration', 'CONNECTION_SUCCESS', {\n          user_id: user,\n          org_id: org\n        });\n      }\n    } catch (e) {\n      var _e$response2, _e$response2$data;\n      logger.error('HubSpotIntegration', 'CREDENTIALS_ERROR', e, {\n        user_id: user,\n        org_id: org\n      });\n      alert(e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.detail);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  useEffect(() => {\n    const hasCredentials = Boolean(integrationParams === null || integrationParams === void 0 ? void 0 : integrationParams.credentials);\n    setIsConnected(hasCredentials);\n    if (hasCredentials) {\n      logger.debug('HubSpotIntegration', 'CREDENTIALS_LOADED', {\n        user_id: user,\n        org_id: org\n      });\n    }\n  }, [integrationParams, user, org]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Parameters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      sx: {\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: isConnected ? undefined : handleConnectClick,\n        color: isConnected ? 'success' : 'primary',\n        disabled: isConnecting,\n        style: {\n          pointerEvents: isConnected ? 'none' : 'auto',\n          cursor: isConnected ? 'default' : 'pointer',\n          opacity: isConnected ? 1 : undefined\n        },\n        children: isConnected ? 'HubSpot Connected' : isConnecting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 63\n        }, this) : 'Connect to HubSpot'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s(HubSpotIntegration, \"YVzh0k4rAm9dKRmEfKk5oscD40o=\");\n_c = HubSpotIntegration;\nvar _c;\n$RefreshReg$(_c, \"HubSpotIntegration\");","map":{"version":3,"names":["useState","useEffect","Box","Button","CircularProgress","axios","logger","jsxDEV","_jsxDEV","createFormData","user","org","formData","FormData","append","pollWindowClose","newWindow","callback","interval","pollTimer","window","setInterval","closed","clearInterval","HubSpotIntegration","integrationParams","setIntegrationParams","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","handleConnectClick","startTime","performance","now","logUserInteraction","user_id","org_id","response","post","authURL","data","logApiCall","status","open","info","auth_url","handleWindowClosed","e","_e$response","_e$response$data","error","alert","detail","credentials","prev","type","_e$response2","_e$response2$data","hasCredentials","Boolean","debug","sx","mt","children","fileName","_jsxFileName","lineNumber","columnNumber","display","alignItems","justifyContent","variant","onClick","undefined","color","disabled","style","pointerEvents","cursor","opacity","size","_c","$RefreshReg$"],"sources":["/Users/yashgupta/Downloads/vectorshift-assignment/frontend/src/integrations/hubspot.js"],"sourcesContent":["// // hubspot.js\n\n// import { useState, useEffect } from 'react';\n// import {\n//     Box,\n//     Button,\n//     CircularProgress\n// } from '@mui/material';\n// import axios from 'axios';\n// import logger from '../services/logger';\n\n// export const HubSpotIntegration = ({ user, org, integrationParams, setIntegrationParams }) => {\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [isConnecting, setIsConnecting] = useState(false);\n\n//     // Function to open OAuth in a new window\n//     const handleConnectClick = async () => {\n//         const startTime = performance.now();\n//         try {\n//             logger.logUserInteraction('HubSpotIntegration', 'CONNECT_CLICK', {\n//                 user_id: user,\n//                 org_id: org\n//             });\n\n//             setIsConnecting(true);\n//             const formData = new FormData();\n//             formData.append('user_id', user);\n//             formData.append('org_id', org);\n\n//             const response = await axios.post(`http://localhost:8000/integrations/hubspot/authorize`, formData);\n//             const authURL = response?.data;\n\n//             logger.logApiCall(\n//                 'HubSpotIntegration',\n//                 '/integrations/hubspot/authorize',\n//                 'POST',\n//                 startTime,\n//                 response.status,\n//                 { user_id: user, org_id: org }\n//             );\n\n//             const newWindow = window.open(authURL, 'HubSpot Authorization', 'width=600, height=600');\n//             logger.info('HubSpotIntegration', 'OAUTH_WINDOW_OPENED', {\n//                 auth_url: authURL\n//             });\n\n//             // Polling for the window to close\n//             const pollTimer = window.setInterval(() => {\n//                 if (newWindow?.closed !== false) { \n//                     window.clearInterval(pollTimer);\n//                     handleWindowClosed();\n//                 }\n//             }, 200);\n//         } catch (e) {\n//             logger.error('HubSpotIntegration', 'CONNECT_ERROR', e, {\n//                 user_id: user,\n//                 org_id: org\n//             });\n//             setIsConnecting(false);\n//             alert(e?.response?.data?.detail);\n//         }\n//     }\n\n//     // Function to handle logic when the OAuth window closes\n//     const handleWindowClosed = async () => {\n//         const startTime = performance.now();\n//         try {\n//             logger.info('HubSpotIntegration', 'OAUTH_WINDOW_CLOSED');\n\n//             const formData = new FormData();\n//             formData.append('user_id', user);\n//             formData.append('org_id', org);\n//             const response = await axios.post(`http://localhost:8000/integrations/hubspot/credentials`, formData);\n//             const credentials = response.data;\n\n//             logger.logApiCall(\n//                 'HubSpotIntegration',\n//                 '/integrations/hubspot/credentials',\n//                 'POST',\n//                 startTime,\n//                 response.status,\n//                 { user_id: user, org_id: org }\n//             );\n\n//             if (credentials) {\n//                 setIsConnecting(false);\n//                 setIsConnected(true);\n//                 setIntegrationParams(prev => ({ ...prev, credentials: credentials, type: 'HubSpot' }));\n//                 logger.info('HubSpotIntegration', 'CONNECTION_SUCCESS', {\n//                     user_id: user,\n//                     org_id: org\n//                 });\n//             }\n//             setIsConnecting(false);\n//         } catch (e) {\n//             logger.error('HubSpotIntegration', 'CREDENTIALS_ERROR', e, {\n//                 user_id: user,\n//                 org_id: org\n//             });\n//             setIsConnecting(false);\n//             alert(e?.response?.data?.detail);\n//         }\n//     }\n\n//     useEffect(() => {\n//         const hasCredentials = Boolean(integrationParams?.credentials);\n//         setIsConnected(hasCredentials);\n        \n//         if (hasCredentials) {\n//             logger.debug('HubSpotIntegration', 'CREDENTIALS_LOADED', {\n//                 user_id: user,\n//                 org_id: org\n//             });\n//         }\n//     }, [integrationParams, user, org]);\n\n//     return (\n//         <>\n//         <Box sx={{mt: 2}}>\n//             Parameters\n//             <Box display='flex' alignItems='center' justifyContent='center' sx={{mt: 2}}>\n//                 <Button \n//                     variant='contained' \n//                     onClick={isConnected ? () => {} : handleConnectClick}\n//                     color={isConnected ? 'success' : 'primary'}\n//                     disabled={isConnecting}\n//                     style={{\n//                         pointerEvents: isConnected ? 'none' : 'auto',\n//                         cursor: isConnected ? 'default' : 'pointer',\n//                         opacity: isConnected ? 1 : undefined\n//                     }}\n//                 >\n//                     {isConnected ? 'HubSpot Connected' : isConnecting ? <CircularProgress size={20} /> : 'Connect to HubSpot'}\n//                 </Button>\n//             </Box>\n//         </Box>\n//       </>\n//     );\n// }\n\n// hubspot.js\nimport { useState, useEffect } from 'react';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport axios from 'axios';\nimport logger from '../services/logger';\n\n// Helper to create form data\nconst createFormData = (user, org) => {\n  const formData = new FormData();\n  formData.append('user_id', user);\n  formData.append('org_id', org);\n  return formData;\n};\n\n// Helper to poll for window close event\nconst pollWindowClose = (newWindow, callback, interval = 200) => {\n  const pollTimer = window.setInterval(() => {\n    if (newWindow?.closed !== false) {\n      window.clearInterval(pollTimer);\n      callback();\n    }\n  }, interval);\n};\n\nexport const HubSpotIntegration = ({ user, org, integrationParams, setIntegrationParams }) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  // Initiates the OAuth process and opens the authorization window\n  const handleConnectClick = async () => {\n    const startTime = performance.now();\n    try {\n      logger.logUserInteraction('HubSpotIntegration', 'CONNECT_CLICK', { user_id: user, org_id: org });\n      setIsConnecting(true);\n      const response = await axios.post(\n        'http://localhost:8000/integrations/hubspot/authorize',\n        createFormData(user, org)\n      );\n      const authURL = response?.data;\n      logger.logApiCall('HubSpotIntegration', '/integrations/hubspot/authorize', 'POST', startTime, response.status, { user_id: user, org_id: org });\n      const newWindow = window.open(authURL, 'HubSpot Authorization', 'width=600, height=600');\n      logger.info('HubSpotIntegration', 'OAUTH_WINDOW_OPENED', { auth_url: authURL });\n      pollWindowClose(newWindow, handleWindowClosed);\n    } catch (e) {\n      logger.error('HubSpotIntegration', 'CONNECT_ERROR', e, { user_id: user, org_id: org });\n      setIsConnecting(false);\n      alert(e?.response?.data?.detail);\n    }\n  };\n\n  // Fetches credentials once the OAuth window is closed\n  const handleWindowClosed = async () => {\n    const startTime = performance.now();\n    try {\n      logger.info('HubSpotIntegration', 'OAUTH_WINDOW_CLOSED');\n      const response = await axios.post(\n        'http://localhost:8000/integrations/hubspot/credentials',\n        createFormData(user, org)\n      );\n      const credentials = response.data;\n      logger.logApiCall('HubSpotIntegration', '/integrations/hubspot/credentials', 'POST', startTime, response.status, { user_id: user, org_id: org });\n      if (credentials) {\n        setIsConnected(true);\n        setIntegrationParams(prev => ({ ...prev, credentials, type: 'HubSpot' }));\n        logger.info('HubSpotIntegration', 'CONNECTION_SUCCESS', { user_id: user, org_id: org });\n      }\n    } catch (e) {\n      logger.error('HubSpotIntegration', 'CREDENTIALS_ERROR', e, { user_id: user, org_id: org });\n      alert(e?.response?.data?.detail);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  useEffect(() => {\n    const hasCredentials = Boolean(integrationParams?.credentials);\n    setIsConnected(hasCredentials);\n    if (hasCredentials) {\n      logger.debug('HubSpotIntegration', 'CREDENTIALS_LOADED', { user_id: user, org_id: org });\n    }\n  }, [integrationParams, user, org]);\n\n  return (\n    <Box sx={{ mt: 2 }}>\n      <p>Parameters</p>\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" sx={{ mt: 2 }}>\n        <Button\n          variant=\"contained\"\n          onClick={isConnected ? undefined : handleConnectClick}\n          color={isConnected ? 'success' : 'primary'}\n          disabled={isConnecting}\n          style={{\n            pointerEvents: isConnected ? 'none' : 'auto',\n            cursor: isConnected ? 'default' : 'pointer',\n            opacity: isConnected ? 1 : undefined\n          }}\n        >\n          {isConnected ? 'HubSpot Connected' : isConnecting ? <CircularProgress size={20} /> : 'Connect to HubSpot'}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,GAAG,EAAEC,MAAM,EAAEC,gBAAgB,QAAQ,eAAe;AAC7D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,oBAAoB;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAACC,IAAI,EAAEC,GAAG,KAAK;EACpC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEJ,IAAI,CAAC;EAChCE,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEH,GAAG,CAAC;EAC9B,OAAOC,QAAQ;AACjB,CAAC;;AAED;AACA,MAAMG,eAAe,GAAGA,CAACC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,GAAG,GAAG,KAAK;EAC/D,MAAMC,SAAS,GAAGC,MAAM,CAACC,WAAW,CAAC,MAAM;IACzC,IAAI,CAAAL,SAAS,aAATA,SAAS,uBA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}