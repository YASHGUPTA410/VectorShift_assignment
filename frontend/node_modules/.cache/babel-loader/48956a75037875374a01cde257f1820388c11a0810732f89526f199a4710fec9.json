{"ast":null,"code":"var _jsxFileName = \"/Users/yashgupta/Downloads/vectorshift-assignment/frontend/src/integrations/hubspot.js\",\n  _s = $RefreshSig$();\n// hubspot.js\n\nimport { useState, useEffect } from 'react';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport axios from 'axios';\nimport logger from '../services/logger';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const HubSpotIntegration = ({\n  user,\n  org,\n  integrationParams,\n  setIntegrationParams\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  // Function to open OAuth in a new window\n  const handleConnectClick = async () => {\n    const startTime = performance.now();\n    try {\n      logger.logUserInteraction('HubSpotIntegration', 'CONNECT_CLICK', {\n        user_id: user,\n        org_id: org\n      });\n      setIsConnecting(true);\n      const formData = new FormData();\n      formData.append('user_id', user);\n      formData.append('org_id', org);\n      const response = await axios.post(`http://localhost:8000/integrations/hubspot/authorize`, formData);\n      const authURL = response === null || response === void 0 ? void 0 : response.data;\n      logger.logApiCall('HubSpotIntegration', '/integrations/hubspot/authorize', 'POST', startTime, response.status, {\n        user_id: user,\n        org_id: org\n      });\n      const newWindow = window.open(authURL, 'HubSpot Authorization', 'width=600, height=600');\n      logger.info('HubSpotIntegration', 'OAUTH_WINDOW_OPENED', {\n        auth_url: authURL\n      });\n\n      // Polling for the window to close\n      const pollTimer = window.setInterval(() => {\n        if ((newWindow === null || newWindow === void 0 ? void 0 : newWindow.closed) !== false) {\n          window.clearInterval(pollTimer);\n          handleWindowClosed();\n        }\n      }, 200);\n    } catch (e) {\n      var _e$response, _e$response$data;\n      logger.error('HubSpotIntegration', 'CONNECT_ERROR', e, {\n        user_id: user,\n        org_id: org\n      });\n      setIsConnecting(false);\n      alert(e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.detail);\n    }\n  };\n\n  // Function to handle logic when the OAuth window closes\n  const handleWindowClosed = async () => {\n    const startTime = performance.now();\n    try {\n      logger.info('HubSpotIntegration', 'OAUTH_WINDOW_CLOSED');\n      const formData = new FormData();\n      formData.append('user_id', user);\n      formData.append('org_id', org);\n      const response = await axios.post(`http://localhost:8000/integrations/hubspot/credentials`, formData);\n      const credentials = response.data;\n      logger.logApiCall('HubSpotIntegration', '/integrations/hubspot/credentials', 'POST', startTime, response.status, {\n        user_id: user,\n        org_id: org\n      });\n      if (credentials) {\n        setIsConnecting(false);\n        setIsConnected(true);\n        setIntegrationParams(prev => ({\n          ...prev,\n          credentials: credentials,\n          type: 'HubSpot'\n        }));\n        logger.info('HubSpotIntegration', 'CONNECTION_SUCCESS', {\n          user_id: user,\n          org_id: org\n        });\n      }\n      setIsConnecting(false);\n    } catch (e) {\n      var _e$response2, _e$response2$data;\n      logger.error('HubSpotIntegration', 'CREDENTIALS_ERROR', e, {\n        user_id: user,\n        org_id: org\n      });\n      setIsConnecting(false);\n      alert(e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.detail);\n    }\n  };\n  useEffect(() => {\n    const hasCredentials = Boolean(integrationParams === null || integrationParams === void 0 ? void 0 : integrationParams.credentials);\n    setIsConnected(hasCredentials);\n    if (hasCredentials) {\n      logger.debug('HubSpotIntegration', 'CREDENTIALS_LOADED', {\n        user_id: user,\n        org_id: org\n      });\n    }\n  }, [integrationParams, user, org]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: [\"Parameters\", /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        sx: {\n          mt: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: isConnected ? () => {} : handleConnectClick,\n          color: isConnected ? 'success' : 'primary',\n          disabled: isConnecting,\n          style: {\n            pointerEvents: isConnected ? 'none' : 'auto',\n            cursor: isConnected ? 'default' : 'pointer',\n            opacity: isConnected ? 1 : undefined\n          },\n          children: isConnected ? 'HubSpot Connected' : isConnecting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 73\n          }, this) : 'Connect to HubSpot'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(HubSpotIntegration, \"YVzh0k4rAm9dKRmEfKk5oscD40o=\");\n_c = HubSpotIntegration;\nvar _c;\n$RefreshReg$(_c, \"HubSpotIntegration\");","map":{"version":3,"names":["useState","useEffect","Box","Button","CircularProgress","axios","logger","jsxDEV","_jsxDEV","Fragment","_Fragment","HubSpotIntegration","user","org","integrationParams","setIntegrationParams","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","handleConnectClick","startTime","performance","now","logUserInteraction","user_id","org_id","formData","FormData","append","response","post","authURL","data","logApiCall","status","newWindow","window","open","info","auth_url","pollTimer","setInterval","closed","clearInterval","handleWindowClosed","e","_e$response","_e$response$data","error","alert","detail","credentials","prev","type","_e$response2","_e$response2$data","hasCredentials","Boolean","debug","children","sx","mt","display","alignItems","justifyContent","variant","onClick","color","disabled","style","pointerEvents","cursor","opacity","undefined","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yashgupta/Downloads/vectorshift-assignment/frontend/src/integrations/hubspot.js"],"sourcesContent":["// hubspot.js\n\nimport { useState, useEffect } from 'react';\nimport {\n    Box,\n    Button,\n    CircularProgress\n} from '@mui/material';\nimport axios from 'axios';\nimport logger from '../services/logger';\n\nexport const HubSpotIntegration = ({ user, org, integrationParams, setIntegrationParams }) => {\n    const [isConnected, setIsConnected] = useState(false);\n    const [isConnecting, setIsConnecting] = useState(false);\n\n    // Function to open OAuth in a new window\n    const handleConnectClick = async () => {\n        const startTime = performance.now();\n        try {\n            logger.logUserInteraction('HubSpotIntegration', 'CONNECT_CLICK', {\n                user_id: user,\n                org_id: org\n            });\n\n            setIsConnecting(true);\n            const formData = new FormData();\n            formData.append('user_id', user);\n            formData.append('org_id', org);\n\n            const response = await axios.post(`http://localhost:8000/integrations/hubspot/authorize`, formData);\n            const authURL = response?.data;\n\n            logger.logApiCall(\n                'HubSpotIntegration',\n                '/integrations/hubspot/authorize',\n                'POST',\n                startTime,\n                response.status,\n                { user_id: user, org_id: org }\n            );\n\n            const newWindow = window.open(authURL, 'HubSpot Authorization', 'width=600, height=600');\n            logger.info('HubSpotIntegration', 'OAUTH_WINDOW_OPENED', {\n                auth_url: authURL\n            });\n\n            // Polling for the window to close\n            const pollTimer = window.setInterval(() => {\n                if (newWindow?.closed !== false) { \n                    window.clearInterval(pollTimer);\n                    handleWindowClosed();\n                }\n            }, 200);\n        } catch (e) {\n            logger.error('HubSpotIntegration', 'CONNECT_ERROR', e, {\n                user_id: user,\n                org_id: org\n            });\n            setIsConnecting(false);\n            alert(e?.response?.data?.detail);\n        }\n    }\n\n    // Function to handle logic when the OAuth window closes\n    const handleWindowClosed = async () => {\n        const startTime = performance.now();\n        try {\n            logger.info('HubSpotIntegration', 'OAUTH_WINDOW_CLOSED');\n\n            const formData = new FormData();\n            formData.append('user_id', user);\n            formData.append('org_id', org);\n            const response = await axios.post(`http://localhost:8000/integrations/hubspot/credentials`, formData);\n            const credentials = response.data;\n\n            logger.logApiCall(\n                'HubSpotIntegration',\n                '/integrations/hubspot/credentials',\n                'POST',\n                startTime,\n                response.status,\n                { user_id: user, org_id: org }\n            );\n\n            if (credentials) {\n                setIsConnecting(false);\n                setIsConnected(true);\n                setIntegrationParams(prev => ({ ...prev, credentials: credentials, type: 'HubSpot' }));\n                logger.info('HubSpotIntegration', 'CONNECTION_SUCCESS', {\n                    user_id: user,\n                    org_id: org\n                });\n            }\n            setIsConnecting(false);\n        } catch (e) {\n            logger.error('HubSpotIntegration', 'CREDENTIALS_ERROR', e, {\n                user_id: user,\n                org_id: org\n            });\n            setIsConnecting(false);\n            alert(e?.response?.data?.detail);\n        }\n    }\n\n    useEffect(() => {\n        const hasCredentials = Boolean(integrationParams?.credentials);\n        setIsConnected(hasCredentials);\n        \n        if (hasCredentials) {\n            logger.debug('HubSpotIntegration', 'CREDENTIALS_LOADED', {\n                user_id: user,\n                org_id: org\n            });\n        }\n    }, [integrationParams, user, org]);\n\n    return (\n        <>\n        <Box sx={{mt: 2}}>\n            Parameters\n            <Box display='flex' alignItems='center' justifyContent='center' sx={{mt: 2}}>\n                <Button \n                    variant='contained' \n                    onClick={isConnected ? () => {} : handleConnectClick}\n                    color={isConnected ? 'success' : 'primary'}\n                    disabled={isConnecting}\n                    style={{\n                        pointerEvents: isConnected ? 'none' : 'auto',\n                        cursor: isConnected ? 'default' : 'pointer',\n                        opacity: isConnected ? 1 : undefined\n                    }}\n                >\n                    {isConnected ? 'HubSpot Connected' : isConnecting ? <CircularProgress size={20} /> : 'Connect to HubSpot'}\n                </Button>\n            </Box>\n        </Box>\n      </>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}