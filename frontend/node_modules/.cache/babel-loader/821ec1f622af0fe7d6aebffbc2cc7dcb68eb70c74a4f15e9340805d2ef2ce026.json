{"ast":null,"code":"var _jsxFileName = \"/Users/yashgupta/Downloads/vectorshift-assignment/frontend/src/integrations/notion.js\",\n  _s = $RefreshSig$();\n// // notion.js\n\n// import { useState, useEffect } from 'react';\n// import {\n//     Box,\n//     Button,\n//     CircularProgress\n// } from '@mui/material';\n// import axios from 'axios';\n\n// export const NotionIntegration = ({ user, org, integrationParams, setIntegrationParams }) => {\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [isConnecting, setIsConnecting] = useState(false);\n\n//     // Function to open OAuth in a new window\n//     const handleConnectClick = async () => {\n//         try {\n//             setIsConnecting(true);\n//             const formData = new FormData();\n//             formData.append('user_id', user);\n//             formData.append('org_id', org);\n//             const response = await axios.post(`http://localhost:8000/integrations/notion/authorize`, formData);\n//             console.log(response);\n//             const authURL = response?.data;\n\n//             const newWindow = window.open(authURL, 'Notion Authorization', 'width=600, height=600');\n\n//             // Polling for the window to close\n//             const pollTimer = window.setInterval(() => {\n//                 if (newWindow?.closed !== false) { \n//                     window.clearInterval(pollTimer);\n//                     handleWindowClosed();\n//                 }\n//             }, 200);\n//         } catch (e) {\n//             setIsConnecting(false);\n//             alert(e?.response?.data?.detail);\n//         }\n//     }\n\n//     // Function to handle logic when the OAuth window closes\n//     const handleWindowClosed = async () => {\n//         try {\n//             const formData = new FormData();\n//             formData.append('user_id', user);\n//             formData.append('org_id', org);\n//             const response = await axios.post(`http://localhost:8000/integrations/notion/credentials`, formData);\n//             const credentials = response.data; \n//             if (credentials) {\n//                 setIsConnecting(false);\n//                 setIsConnected(true);\n//                 setIntegrationParams(prev => ({ ...prev, credentials: credentials, type: 'Notion' }));\n//             }\n//             setIsConnecting(false);\n//         } catch (e) {\n//             setIsConnecting(false);\n//             alert(e?.response?.data?.detail);\n//         }\n//     }\n\n//     useEffect(() => {\n//         setIsConnected(integrationParams?.credentials ? true : false)\n//     }, []);\n\n//     return (\n//         <>\n//         <Box sx={{mt: 2}}>\n//             Parameters\n//             <Box display='flex' alignItems='center' justifyContent='center' sx={{mt: 2}}>\n//                 <Button \n//                     variant='contained' \n//                     onClick={isConnected ? () => {} :handleConnectClick}\n//                     color={isConnected ? 'success' : 'primary'}\n//                     disabled={isConnecting}\n//                     style={{\n//                         pointerEvents: isConnected ? 'none' : 'auto',\n//                         cursor: isConnected ? 'default' : 'pointer',\n//                         opacity: isConnected ? 1 : undefined\n//                     }}\n//                 >\n//                     {isConnected ? 'Notion Connected' : isConnecting ? <CircularProgress size={20} /> : 'Connect to Notion'}\n//                 </Button>\n//             </Box>\n//         </Box>\n//       </>\n//     );\n// }\n\n// notion.js\nimport { useState, useEffect } from 'react';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport axios from 'axios';\n\n// Helper: create form data from user and org\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createFormData = (user, org) => {\n  const formData = new FormData();\n  formData.append('user_id', user);\n  formData.append('org_id', org);\n  return formData;\n};\n\n// Helper: poll until the window closes, then call callback\nconst pollWindowClose = (newWindow, callback, interval = 200) => {\n  const pollTimer = window.setInterval(() => {\n    if ((newWindow === null || newWindow === void 0 ? void 0 : newWindow.closed) !== false) {\n      window.clearInterval(pollTimer);\n      callback();\n    }\n  }, interval);\n};\nexport const NotionIntegration = ({\n  user,\n  org,\n  integrationParams,\n  setIntegrationParams\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  // Initiates the OAuth flow\n  const handleConnectClick = async () => {\n    try {\n      console.log('Starting Notion connection...');\n      setIsConnecting(true);\n      const response = await axios.post('http://localhost:8000/integrations/notion/authorize', createFormData(user, org));\n      const authURL = response === null || response === void 0 ? void 0 : response.data;\n      console.log('Received auth URL:', authURL);\n      const newWindow = window.open(authURL, 'Notion Authorization', 'width=600, height=600');\n      pollWindowClose(newWindow, handleWindowClosed);\n    } catch (e) {\n      var _e$response, _e$response$data;\n      console.error('Error in Notion connect:', e);\n      setIsConnecting(false);\n      alert(e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.detail);\n    }\n  };\n\n  // Fetches credentials after the OAuth window closes\n  const handleWindowClosed = async () => {\n    try {\n      console.log('Fetching Notion credentials...');\n      const response = await axios.post('http://localhost:8000/integrations/notion/credentials', createFormData(user, org));\n      const credentials = response.data;\n      console.log('Received credentials:', credentials);\n      if (credentials) {\n        setIsConnected(true);\n        setIntegrationParams(prev => ({\n          ...prev,\n          credentials,\n          type: 'Notion'\n        }));\n      }\n    } catch (e) {\n      var _e$response2, _e$response2$data;\n      console.error('Error fetching Notion credentials:', e);\n      alert(e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.detail);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  useEffect(() => {\n    setIsConnected(Boolean(integrationParams === null || integrationParams === void 0 ? void 0 : integrationParams.credentials));\n  }, [integrationParams]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Parameters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      sx: {\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: isConnected ? undefined : handleConnectClick,\n        color: isConnected ? 'success' : 'primary',\n        disabled: isConnecting,\n        style: {\n          pointerEvents: isConnected ? 'none' : 'auto',\n          cursor: isConnected ? 'default' : 'pointer',\n          opacity: isConnected ? 1 : undefined\n        },\n        children: isConnected ? 'Notion Connected' : isConnecting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 62\n        }, this) : 'Connect to Notion'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(NotionIntegration, \"YVzh0k4rAm9dKRmEfKk5oscD40o=\");\n_c = NotionIntegration;\nvar _c;\n$RefreshReg$(_c, \"NotionIntegration\");","map":{"version":3,"names":["useState","useEffect","Box","Button","CircularProgress","axios","jsxDEV","_jsxDEV","createFormData","user","org","formData","FormData","append","pollWindowClose","newWindow","callback","interval","pollTimer","window","setInterval","closed","clearInterval","NotionIntegration","integrationParams","setIntegrationParams","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","handleConnectClick","console","log","response","post","authURL","data","open","handleWindowClosed","e","_e$response","_e$response$data","error","alert","detail","credentials","prev","type","_e$response2","_e$response2$data","Boolean","sx","mt","children","fileName","_jsxFileName","lineNumber","columnNumber","display","alignItems","justifyContent","variant","onClick","undefined","color","disabled","style","pointerEvents","cursor","opacity","size","_c","$RefreshReg$"],"sources":["/Users/yashgupta/Downloads/vectorshift-assignment/frontend/src/integrations/notion.js"],"sourcesContent":["// // notion.js\n\n// import { useState, useEffect } from 'react';\n// import {\n//     Box,\n//     Button,\n//     CircularProgress\n// } from '@mui/material';\n// import axios from 'axios';\n\n// export const NotionIntegration = ({ user, org, integrationParams, setIntegrationParams }) => {\n//     const [isConnected, setIsConnected] = useState(false);\n//     const [isConnecting, setIsConnecting] = useState(false);\n\n//     // Function to open OAuth in a new window\n//     const handleConnectClick = async () => {\n//         try {\n//             setIsConnecting(true);\n//             const formData = new FormData();\n//             formData.append('user_id', user);\n//             formData.append('org_id', org);\n//             const response = await axios.post(`http://localhost:8000/integrations/notion/authorize`, formData);\n//             console.log(response);\n//             const authURL = response?.data;\n\n//             const newWindow = window.open(authURL, 'Notion Authorization', 'width=600, height=600');\n\n//             // Polling for the window to close\n//             const pollTimer = window.setInterval(() => {\n//                 if (newWindow?.closed !== false) { \n//                     window.clearInterval(pollTimer);\n//                     handleWindowClosed();\n//                 }\n//             }, 200);\n//         } catch (e) {\n//             setIsConnecting(false);\n//             alert(e?.response?.data?.detail);\n//         }\n//     }\n\n//     // Function to handle logic when the OAuth window closes\n//     const handleWindowClosed = async () => {\n//         try {\n//             const formData = new FormData();\n//             formData.append('user_id', user);\n//             formData.append('org_id', org);\n//             const response = await axios.post(`http://localhost:8000/integrations/notion/credentials`, formData);\n//             const credentials = response.data; \n//             if (credentials) {\n//                 setIsConnecting(false);\n//                 setIsConnected(true);\n//                 setIntegrationParams(prev => ({ ...prev, credentials: credentials, type: 'Notion' }));\n//             }\n//             setIsConnecting(false);\n//         } catch (e) {\n//             setIsConnecting(false);\n//             alert(e?.response?.data?.detail);\n//         }\n//     }\n\n//     useEffect(() => {\n//         setIsConnected(integrationParams?.credentials ? true : false)\n//     }, []);\n\n//     return (\n//         <>\n//         <Box sx={{mt: 2}}>\n//             Parameters\n//             <Box display='flex' alignItems='center' justifyContent='center' sx={{mt: 2}}>\n//                 <Button \n//                     variant='contained' \n//                     onClick={isConnected ? () => {} :handleConnectClick}\n//                     color={isConnected ? 'success' : 'primary'}\n//                     disabled={isConnecting}\n//                     style={{\n//                         pointerEvents: isConnected ? 'none' : 'auto',\n//                         cursor: isConnected ? 'default' : 'pointer',\n//                         opacity: isConnected ? 1 : undefined\n//                     }}\n//                 >\n//                     {isConnected ? 'Notion Connected' : isConnecting ? <CircularProgress size={20} /> : 'Connect to Notion'}\n//                 </Button>\n//             </Box>\n//         </Box>\n//       </>\n//     );\n// }\n\n\n// notion.js\nimport { useState, useEffect } from 'react';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport axios from 'axios';\n\n// Helper: create form data from user and org\nconst createFormData = (user, org) => {\n  const formData = new FormData();\n  formData.append('user_id', user);\n  formData.append('org_id', org);\n  return formData;\n};\n\n// Helper: poll until the window closes, then call callback\nconst pollWindowClose = (newWindow, callback, interval = 200) => {\n  const pollTimer = window.setInterval(() => {\n    if (newWindow?.closed !== false) {\n      window.clearInterval(pollTimer);\n      callback();\n    }\n  }, interval);\n};\n\nexport const NotionIntegration = ({ user, org, integrationParams, setIntegrationParams }) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  // Initiates the OAuth flow\n  const handleConnectClick = async () => {\n    try {\n      console.log('Starting Notion connection...');\n      setIsConnecting(true);\n      const response = await axios.post(\n        'http://localhost:8000/integrations/notion/authorize',\n        createFormData(user, org)\n      );\n      const authURL = response?.data;\n      console.log('Received auth URL:', authURL);\n      const newWindow = window.open(authURL, 'Notion Authorization', 'width=600, height=600');\n      pollWindowClose(newWindow, handleWindowClosed);\n    } catch (e) {\n      console.error('Error in Notion connect:', e);\n      setIsConnecting(false);\n      alert(e?.response?.data?.detail);\n    }\n  };\n\n  // Fetches credentials after the OAuth window closes\n  const handleWindowClosed = async () => {\n    try {\n      console.log('Fetching Notion credentials...');\n      const response = await axios.post(\n        'http://localhost:8000/integrations/notion/credentials',\n        createFormData(user, org)\n      );\n      const credentials = response.data;\n      console.log('Received credentials:', credentials);\n      if (credentials) {\n        setIsConnected(true);\n        setIntegrationParams(prev => ({ ...prev, credentials, type: 'Notion' }));\n      }\n    } catch (e) {\n      console.error('Error fetching Notion credentials:', e);\n      alert(e?.response?.data?.detail);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  useEffect(() => {\n    setIsConnected(Boolean(integrationParams?.credentials));\n  }, [integrationParams]);\n\n  return (\n    <Box sx={{ mt: 2 }}>\n      <p>Parameters</p>\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" sx={{ mt: 2 }}>\n        <Button\n          variant=\"contained\"\n          onClick={isConnected ? undefined : handleConnectClick}\n          color={isConnected ? 'success' : 'primary'}\n          disabled={isConnecting}\n          style={{\n            pointerEvents: isConnected ? 'none' : 'auto',\n            cursor: isConnected ? 'default' : 'pointer',\n            opacity: isConnected ? 1 : undefined\n          }}\n        >\n          {isConnected ? 'Notion Connected' : isConnecting ? <CircularProgress size={20} /> : 'Connect to Notion'}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}